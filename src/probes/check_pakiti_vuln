#! /usr/bin/perl -w
# nagios: -epn
#
#
# Probe for correlation between Pakiti and SAM vulnerabilities
# Copyright (c) 2014 Emir Imamagic
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Changes and Modifications
# =========================
# 25-Jun-2014 - Created;

use strict;
use Nagios::Plugin;
use LWP::UserAgent;
use GridMon::Nagios;
use Text::CSV;

# Standard variables used in Nagios::Plugin constructor
use constant PROGNAME => "check_pakiti_vuln";
use constant VERSION => '1.0';
use constant DESCRIPTION => 'Probe for correlation between Pakiti and SAM vulnerabilities.';
use constant EXTRA_DESC => "";
use constant LICENSE => 'This nagios plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
   http://www.apache.org/licenses/LICENSE-2.0
Copyright 2014 Emir Imamagic';
use constant SHORTNAME => 'Pakiti-Vuln';
use constant USAGE => "usage: check_pakiti_vuln -H <hostname> \n";

use constant PAKITI_URL => 'https://pakiti.egi.eu/api/tags_sites.php?type=csv';

# Create Nagios::Plugin instance
my $plugin = Nagios::Plugin->new (usage => USAGE,
                                  shortname => SHORTNAME,
                                  version => VERSION,
                                  blurb => DESCRIPTION,
                                  extra => EXTRA_DESC,
                                  license => LICENSE,
                                  plugin  => PROGNAME);

# Define additional arguments
$plugin->add_arg(
    spec => 'url|u=s',
    help => "u|url\n   Address of Pakiti page with vulnerability results.\n   (default: ".PAKITI_URL.")",
    required => 0,
    default => PAKITI_URL
);
$plugin->add_arg(
    spec => 'hostname|H=s',
    help => "H|hostname\n   Hostname of CE host.\n   (default:)",
    required => 1,
);
$plugin->add_arg(
    spec => 'vo=s',
    help => "vo\n   VO name.\n",
    required => 1
);
$plugin->add_arg(
    spec => 'cert=s',
    help => "--cert=/location/...\n   Location of certificate used for authentication.\n",
    required => 0,
    default => '/etc/grid-security/hostcert.pem'
);
$plugin->add_arg(
    spec => 'key=s',
    help => "--key=/location/...\n   Location of key used for authentication.\n",
    required => 0,
    default => '/etc/grid-security/hostkey.pem'
);

$plugin->getopts;

# Signal handler - TERM
local $SIG{ALRM} = sub {
    local $SIG{TERM} = 'IGNORE';
    kill TERM => -$$;
    $plugin->nagios_die("Timeout occured.");
};

local $SIG{TERM} = sub {
    local $SIG{TERM} = 'IGNORE';
    kill TERM => -$$;
    $plugin->nagios_die("Plugin received TERM signal.");
};

# Input params validation

alarm($plugin->opts->timeout);

my $vo = $plugin->opts->vo;
my $nagios = GridMon::Nagios->new();
my $hostname = $plugin->opts->hostname;
my $nodename;
my $pakiti_output = '';
my $vulnNagios = {};
my $hostFound;

my $statusHostAttrs = [];
$nagios->fetchStatusHostData($statusHostAttrs) or die $nagios->{ERROR};
my $statusServiceAttrs = ["current_state","plugin_output","last_check"];
$nagios->fetchStatusServiceData($statusServiceAttrs) or die $nagios->{ERROR};
my $hostFilter = {};
$hostFilter->{host_name} = $hostname;
$nagios->filterHosts($hostFilter) or die $nagios->{ERROR};
foreach my $host (keys %{$nagios->{HOSTS}}) {
    $hostFound = 1;
    my $hostServices = $nagios->{HOSTS}->{$host}->{services};
    foreach my $service (keys %$hostServices) {
        if ($service =~ /eu.egi.sec.WN-check_(\S+?)-$vo/i) {
            $vulnNagios->{$1} = $hostServices->{$service}->{current_state};
        } elsif ($service =~ /eu.egi.sec.WN-Pakiti-$vo/i) {
            $pakiti_output = $hostServices->{$service}->{plugin_output};
            if ($pakiti_output =~ /(\S+?):/) {
                $nodename = $1;
            }
        }
    }
}

if (!$hostFound) {
    $plugin->nagios_die("Host $hostname not found in the Nagios configuration.");
}
if (!$nodename) {
    $plugin->nagios_die("Could not extract node name from Nagios test eu.egi.sec.WN-Pakiti-$vo output: $pakiti_output");
}

if ($plugin->opts->verbose) {
    print "Looking for vulnerabilities in Pakiti for node: $nodename\n";
    print "CE has the following Nagios vuln tests:\n";
    foreach my $vuln (sort keys %{$vulnNagios}) {
        print "- $vuln: ".$vulnNagios->{$vuln}."\n";
    }
}

$ENV{HTTPS_KEY_FILE} = $plugin->opts->key;
$ENV{HTTPS_CERT_FILE} = $plugin->opts->cert;
$ENV{HTTPS_CA_DIR} = '/etc/grid-security/certificates';

if ($plugin->opts->verbose) {
    print "Fetching data from Pakiti URL: ".$plugin->opts->url."\n";
}

my $ua = LWP::UserAgent->new(env_proxy=>1);
my $req = HTTP::Request->new(GET => $plugin->opts->url);
my $res = $ua->request($req);
if (!$res->is_success) {
    $plugin->nagios_die("Could not get content of Pakiti web page '".$plugin->opts->url."': ".$res->status_line);
}

my $response = $res->content;
open my $fh, '<', \$response or $plugin->nagios_die("Failed passing HTTP response to file handle: $!");

my $vulnPakiti = {};
my @vulnUnresolved = ();
my $nodeFound;

my $csv = Text::CSV->new();
while (my $row = $csv->getline($fh)) {
    next if ( $row->[0] !~ /EGI-Critical/ );
    if ( $row->[4] =~ /$nodename/ ) {
        $nodeFound = 1;
        $vulnPakiti->{lc($row->[7])} = 1;
    }
}

alarm(0);

if (!$nodeFound) {
    $plugin->nagios_exit(OK, "No vulnerabilities found in Pakiti.");
}

if ($plugin->opts->verbose) {
    print "Pakiti contains the following vulnerabilities for node $nodename:\n";
    foreach my $vuln (sort keys %{$vulnPakiti}) {
        print "- $vuln\n";
    }
}

foreach my $vuln (sort keys %{$vulnPakiti}) {
    next if (exists $vulnNagios->{$vuln} && $vulnNagios->{$vuln} == 0);    
    push(@vulnUnresolved, $vuln);
}

if (@vulnUnresolved) {
    $plugin->nagios_exit(CRITICAL, "Found following unresolved vulnerabilities in Pakiti: ".join(', ',@vulnUnresolved));
}
$plugin->nagios_exit(OK, "All vulnerabilities in Pakiti patched");


